name: Run Exercise Tests

on:
  push:
    branches:
      - main
    paths:
      - 'exercises/**'
  pull_request:
    branches:
      - main
    paths:
      - 'exercises/**'
  workflow_dispatch:

jobs:
  build:
    name: Set Up Python Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  determine-changes:
    name: Determine Changed Exercises
    needs: 
      - build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get list of changed files
        id: changes
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          # Fetch the list of changed files
          git fetch origin ${{ github.event.before }} --depth=1
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^exercises/' || true)
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Extract Changed Exercises
        id: extract-exercises
        run: |
          # Initialize an empty array
          exercises=()
          # Iterate over changed files to extract exercise numbers
          for file in $CHANGED_FILES; do
            # Assuming file paths like exercises/exercise_X.py or exercises/test_exercise_X.py
            if [[ $file =~ exercises/test_exercise_([0-9]+)\.py ]]; then
              exercises+=(${BASH_REMATCH[1]})
            elif [[ $file =~ exercises/exercise_([0-9]+)\.py ]]; then
              exercises+=(${BASH_REMATCH[1]})
            fi
          done
          # Remove duplicates
          unique_exercises=($(echo "${exercises[@]}" | tr ' ' '\n' | sort -n | uniq))
          # Convert to JSON array
          if [ ${#unique_exercises[@]} -eq 0 ]; then
            json_matrix='[]'
          else
            json_matrix=$(printf '["%s"]' "$(IFS=','; echo "${unique_exercises[*]}" | sed 's/ /\",\"/g')")
          fi
          echo "matrix=$json_matrix" >> $GITHUB_OUTPUT

      - name: Set Matrix Output
        id: set-matrix
        run: |
          echo "matrix=${{ steps.extract-exercises.outputs.matrix }}" >> $GITHUB_OUTPUT

  tests:
    name: Run Tests
    needs: 
      - build
      - determine-changes
    runs-on: ubuntu-latest
    if: needs.determine-changes.outputs.matrix != '[]'
    strategy:
      matrix:
        exercise: ${{ fromJson(needs.determine-changes.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Test for Exercise ${{ matrix.exercise }}
        run: |
          pytest --color=yes --failed-first -x exercises/test_exercise_${{ matrix.exercise }}.py
